/******************************************************************************
 ** WOGRA technologies GmbH & Co. KG Modul Information
 ** Modulename: CwmsJson.h
 ** Started Implementation: 2012/04/03
 ** Description:
 **
 **
 **
 ** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 ** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. 
 **(C) copyright by WOGRA technologies GmbH & Co. KG All rights reserved
 *****************************************************************************/

#ifndef CWMSJSON_H
#define CWMSJSON_H


// System and QT Includes
#include <QVariant>
#include <QString>


// own Includes
#include "IwmsSerializer.h"
#include "IwmsParser.h"
#include "wmscommons.h"


/**
* \enum JsonToken
*/
enum JsonToken
{
   JsonTokenNone = 0,
   JsonTokenCurlyOpen = 1,
   JsonTokenCurlyClose = 2,
   JsonTokenSquaredOpen = 3,
   JsonTokenSquaredClose = 4,
   JsonTokenColon = 5,
   JsonTokenComma = 6,
   JsonTokenString = 7,
   JsonTokenNumber = 8,
   JsonTokenTrue = 9,
   JsonTokenFalse = 10,
   JsonTokenNull = 11
};

/**
* \class CwmsJson
* \brief A JSON data parser
*
* CwmsJson parses a JSON data into a QVariant hierarchy.
*/
class WMSCOMMONS_API CwmsJson : public IwmsSerializer, public IwmsParser
{
public:
   /**
   * Parse a JSON string
   *
   * \param json The JSON data
   */
   virtual QVariant parse(const QString &json);

   /**
   * Parse a JSON string
   *
   * \param json The JSON data
   * \param success The success of the parsing
   */
   QVariant parse(const QString &json, bool &success);

   /**
   * This method generates a textual JSON representation
   *
   * \param data The JSON data generated by the parser.
   * \param success The success of the serialization
   */
   virtual QByteArray serialize(const QVariant &data);

   /**
   * This method generates a textual JSON representation
   *
   * \param data The JSON data generated by the parser.
   * \param success The success of the serialization
   *
   * \return QByteArray Textual JSON representation
   */
   QByteArray serialize(const QVariant &data, bool &success);

private:
   /**
   * Parses a value starting from index
   *
   * \param json The JSON data
   * \param index The start index
   * \param success The success of the parse process
   *
   * \return QVariant The parsed value
   */
   QVariant parseValue(const QString &json, int &index,
      bool &success);

   /**
   * Parses an object starting from index
   *
   * \param json The JSON data
   * \param index The start index
   * \param success The success of the object parse
   *
   * \return QVariant The parsed object map
   */
   QVariant parseObject(const QString &json, int &index,
      bool &success);

   /**
   * Parses an array starting from index
   *
   * \param json The JSON data
   * \param index The starting index
   * \param success The success of the array parse
   *
   * \return QVariant The parsed variant array
   */
   QVariant parseArray(const QString &json, int &index,
      bool &success);

   /**
   * Parses a string starting from index
   *
   * \param json The JSON data
   * \param index The starting index
   * \param success The success of the string parse
   *
   * \return QVariant The parsed string
   */
   QVariant parseString(const QString &json, int &index,
      bool &success);

   /**
   * Parses a number starting from index
   *
   * \param json The JSON data
   * \param index The starting index
   *
   * \return QVariant The parsed number
   */
   QVariant parseNumber(const QString &json, int &index);

   /**
   * Get the last index of a number starting from index
   *
   * \param json The JSON data
   * \param index The starting index
   *
   * \return The last index of the number
   */
   int lastIndexOfNumber(const QString &json, int index);

   /**
   * Skip unwanted whitespace symbols starting from index
   *
   * \param json The JSON data
   * \param index The start index
   */
   void eatWhitespace(const QString &json, int &index);

   /**
   * Check what token lies ahead
   *
   * \param json The JSON data
   * \param index The starting index
   *
   * \return int The upcoming token
   */
   int lookAhead(const QString &json, int index);

   /**
   * Get the next JSON token
   *
   * \param json The JSON data
   * \param index The starting index
   *
   * \return int The next JSON token
   */
   int nextToken(const QString &json, int &index);

   public:
   /** +-=---------------------------------------------------------Mo 9. Apr 12:01:48 2012--------*
    * @method  CwmsJson::CwmsJson                      // public                            *
    * @return                                                //                                   *
    * @comment                                                                                    *
    *----------------last changed: -----------------------------Mo 9. Apr 12:01:48 2012-----------*/
    CwmsJson( );

   public:
   /** +-=---------------------------------------------------------Mo 9. Apr 12:01:55 2012--------*
    * @method  CwmsJson::~CwmsJson                     // public, virtual                   *
    * @return  void                                          //                                   *
    * @comment The Destructor of Class CwmsJson                                                *
    *----------------last changed: -----------------------------Mo 9. Apr 12:01:55 2012-----------*/
    virtual ~CwmsJson( );
};


#endif //CWMSJSON_H
